import { useState, useEffect } from "react";
import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectItem } from "@/components/ui/select";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = "https://YOUR_SUPABASE_PROJECT.supabase.co";
const supabaseKey = "YOUR_SUPABASE_ANON_KEY";
const supabase = createClient(supabaseUrl, supabaseKey);

const backgroundImage = "url('/background-placeholder.jpg')"; // Placeholder background image

function Home() {
  const [gift, setGift] = useState("");
  const [recipient, setRecipient] = useState("");
  const [comments, setComments] = useState("");
  const [recipients, setRecipients] = useState([]);

  useEffect(() => {
    const fetchRecipients = async () => {
      const { data, error } = await supabase.from("recipients").select();
      if (data) setRecipients(data.map(r => r.name));
    };
    fetchRecipients();
  }, []);

  const handleSubmit = async () => {
    const { error } = await supabase.from("gifts").insert([{ gift, recipient, comments }]);
    if (!error) {
      setGift("");
      setRecipient("");
      setComments("");
      alert("Dodano prezent!");
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-cover" style={{ backgroundImage }}>
      <Card className="bg-white bg-opacity-90 p-4 rounded-2xl shadow-xl max-w-md w-full">
        <CardContent>
          <h1 className="text-3xl font-bold text-center text-red-700 mb-4">Prezenty</h1>
          <Input placeholder="Jaki prezent?" value={gift} onChange={(e) => setGift(e.target.value)} className="mb-2" />
          <Select value={recipient} onValueChange={setRecipient} className="mb-2">
            {recipients.map((r) => (
              <SelectItem key={r} value={r}>{r}</SelectItem>
            ))}
          </Select>
          <Input placeholder="Dodatkowe informacje" value={comments} onChange={(e) => setComments(e.target.value)} className="mb-2" />
          <Button onClick={handleSubmit} className="w-full bg-green-600 hover:bg-green-700 text-white">Dodaj</Button>
          <Link to="/lista" className="block mt-4 text-center text-blue-600 underline">Zobacz listę prezentów</Link>
          <Link to="/osoby" className="block mt-2 text-center text-green-600 underline">Zarządzaj osobami</Link>
        </CardContent>
      </Card>
    </div>
  );
}

function ListaPrezentow() {
  const [gifts, setGifts] = useState([]);

  useEffect(() => {
    const fetchGifts = async () => {
      const { data } = await supabase.from("gifts").select();
      if (data) setGifts(data.map(g => ({ ...g, checked: g.checked || false })));
    };
    fetchGifts();
  }, []);

  const toggleCheck = async (id, checked) => {
    setGifts(prev => prev.map(g => g.id === id ? { ...g, checked: !g.checked } : g));
    await supabase.from("gifts").update({ checked: !checked }).eq("id", id);
  };

  return (
    <div className="min-h-screen bg-cover p-4" style={{ backgroundImage }}>
      <h2 className="text-3xl text-center text-white mb-4">Lista Prezentów</h2>
      <div className="max-w-xl mx-auto bg-white bg-opacity-90 p-4 rounded-xl shadow-lg">
        {gifts.map(g => (
          <div key={g.id} className="flex items-center gap-2 mb-2">
            <Checkbox checked={g.checked} onCheckedChange={() => toggleCheck(g.id, g.checked)} />
            <span className={g.checked ? "line-through" : ""}>{g.gift} dla {g.recipient}</span>
          </div>
        ))}
        <Link to="/" className="text-blue-600 underline mt-4 block text-center">Powrót</Link>
      </div>
    </div>
  );
}

function ManageRecipients() {
  const [newRecipient, setNewRecipient] = useState("");
  const [recipients, setRecipients] = useState([]);

  useEffect(() => {
    const fetchRecipients = async () => {
      const { data } = await supabase.from("recipients").select();
      if (data) setRecipients(data);
    };
    fetchRecipients();
  }, []);

  const addRecipient = async () => {
    const { data, error } = await supabase.from("recipients").insert([{ name: newRecipient }]);
    if (!error) {
      setRecipients([...recipients, { name: newRecipient }]);
      setNewRecipient("");
    }
  };

  return (
    <div className="min-h-screen bg-cover flex flex-col items-center justify-center" style={{ backgroundImage }}>
      <Card className="bg-white bg-opacity-90 p-6 rounded-xl shadow-lg max-w-md w-full">
        <CardContent>
          <h2 className="text-2xl font-bold text-center text-red-700 mb-4">Zarządzaj Osobami</h2>
          <Input value={newRecipient} onChange={(e) => setNewRecipient(e.target.value)} placeholder="Nowa osoba" className="mb-2" />
          <Button onClick={addRecipient} className="w-full mb-4 bg-green-600 hover:bg-green-700 text-white">Dodaj</Button>
          <ul>
            {recipients.map((r, index) => (
              <li key={index}>{r.name}</li>
            ))}
          </ul>
          <Link to="/" className="text-blue-600 underline mt-4 block text-center">Powrót</Link>
        </CardContent>
      </Card>
    </div>
  );
}

function App() {
  return (
    <GoogleOAuthProvider clientId="YOUR_GOOGLE_CLIENT_ID">
      <Router>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/lista" element={<ListaPrezentow />} />
          <Route path="/osoby" element={<ManageRecipients />} />
        </Routes>
      </Router>
    </GoogleOAuthProvider>
  );
}

export default App;
